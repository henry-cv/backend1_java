Parece que el problema al eliminar un Paciente que tiene Turnos asociados podría estar relacionado con cómo las relaciones y la configuración de cascade están manejadas en tu caso. Aquí te aclaro por qué la línea paciente.getTurnos().forEach(turno -> turno.setPaciente(null)); podría ser necesaria y cómo funcionan las configuraciones de cascada y orphanRemoval.

Explicación de la Configuración
Relación @OneToOne con Domicilio:

java
Copiar código
@OneToOne(cascade = CascadeType.ALL)
@JoinColumn(name = "domicilio_id")
private Domicilio domicilio;
cascade = CascadeType.ALL: Esto indica que todas las operaciones (incluyendo eliminación) realizadas en el Paciente se propagarán al Domicilio. Por lo tanto, al eliminar un Paciente, su Domicilio también será eliminado automáticamente.
Relación @OneToMany con Turno:

java
Copiar código
@OneToMany(mappedBy = "paciente", cascade = CascadeType.ALL, orphanRemoval = true)
private List<Turno> turnos = new ArrayList<>();
cascade = CascadeType.ALL: Esto indica que todas las operaciones realizadas en el Paciente se propagarán a los Turnos asociados. Sin embargo, esto solo afecta las operaciones sobre el Paciente, como la actualización o la eliminación, pero no afecta cómo se manejan las relaciones de forma inversa.
orphanRemoval = true: Esto significa que si un Turno es eliminado de la colección de turnos del Paciente, también será eliminado de la base de datos. Sin embargo, esta configuración solo aplica si el Turno es explícitamente eliminado de la lista turnos.
Por Qué Es Necesaria la Línea paciente.getTurnos().forEach(turno -> turno.setPaciente(null));
Desvinculación de Relaciones:

Aunque cascade = CascadeType.ALL maneja la eliminación del Paciente y los Turnos asociados en la colección, si orphanRemoval está configurado, esto solo aplica a Turnos que se han eliminado explícitamente de la colección. La línea paciente.getTurnos().forEach(turno -> turno.setPaciente(null)); asegura que todos los Turnos asociados al Paciente también se desvinculen adecuadamente antes de eliminar al Paciente.
Evitar Problemas de Integridad Referencial:

En algunos casos, puede haber problemas de integridad referencial o errores si no se desvinculan explícitamente las entidades asociadas antes de eliminar el padre. Esto es especialmente importante si tienes configuraciones que no manejan automáticamente la eliminación en cascada de las relaciones inversas o si hay restricciones de integridad en la base de datos que no permiten eliminaciones sin desvinculación previa.
Consistencia de Datos:

Asegurarse de que los Turnos no tengan un Paciente asociado ayuda a mantener la coherencia de los datos y evita problemas en la base de datos. Aunque CascadeType.ALL debería manejar esto, desvincular manualmente puede prevenir problemas imprevistos.
¿Qué Deberías Hacer?
Para simplificar y evitar problemas, puedes seguir este patrón para eliminar un Paciente:

Desvincular los Turnos:

Asegúrate de desvincular todos los Turnos del Paciente antes de eliminar al Paciente:
java
Copiar código
@Transactional
public void eliminarPaciente(Long id) throws ResourceNotFoundException {
    Paciente paciente = pacienteRepository.findById(id)
        .orElseThrow(() -> new ResourceNotFoundException("No existe el paciente con id " + id));

    // Desvincula los turnos del paciente
    paciente.getTurnos().forEach(turno -> turno.setPaciente(null));

    // Elimina el paciente
    pacienteRepository.delete(paciente);
    LOGGER.warn("Se ha eliminado el paciente con id {}", id);
}
Asegúrate de que la Configuración de Cascada es Adecuada:

Verifica que todas las configuraciones de cascada y orphanRemoval estén correctamente configuradas según las necesidades de tu aplicación.
Revisa la Configuración de la Base de Datos:

Asegúrate de que la base de datos permita la eliminación de registros sin violar las restricciones de integridad.
Este enfoque ayuda a manejar las relaciones y evitar problemas de integridad referencial al eliminar entidades relacionadas.